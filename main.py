from aiogram import Bot, Dispatcher, types, executor
import asyncio
from db import DataBase
from aiogram.utils.exceptions import *
import random

bot = Bot("Token")
dp = Dispatcher(bot)

db = DataBase("postdb.db", bot)

@dp.message_handler(content_types=["video", "photo", "video_note", "document", "voice"])
async def media_group(message: types.Message):
   id = message.from_user.id
   
   checking = await db.check_db(message)
   await db.check_db(message)
   
   if checking == "dont in base":
      return await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø.")
   
   if db.data[2] == "waitMessage":
      if message.video:
         db.cursor.execute("UPDATE admin_data SET video = ? WHERE user_id = ?", (message.video.file_id, id))
         
      elif message.video_note:
         db.cursor.execute("UPDATE admin_data SET video_note = ? WHERE user_id = ?", (message.video_note[0].file_id, id))
         
      elif message.photo:
         db.cursor.execute("UPDATE admin_data SET photo = ? WHERE user_id = ?", (message.photo[0].file_id, id))
         
      elif message.voice:
         db.cursor.execute("UPDATE admin_data SET voice = ? WHERE user_id = ?", (message.voice[0].file_id, id))
         
      elif message.document:
         db.cursor.execute("UPDATE admin_data SET document = ? WHERE user_id = ?", (message.document[0].file_id, id))
      
      db.conn.commit()
      
      if message.caption:
         db.cursor.execute("UPDATE admin_data SET caption = ? WHERE user_id = ?", (message.caption, id))
         db.conn.commit()
         
      await db.edit_message(message)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
   checking = await db.check_db(message)
   
   list_info = ["–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ 'üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç'", "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "–ï—Å–ª–∏ –ø—Ä–∏ —Ä–µ–∂–∏–º–µ —Ñ–æ–Ω—Ç –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏/–¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∏–º–≤–æ–ª, —Ç–æ —Ñ–æ–Ω—Ç –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ —Ç–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã, –æ—Å—Ç–∞–Ω—É—Ç—Å—è", "–ï—Å–ª–∏ –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–µ –≤—ã, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —É –ø–µ—Ä–≤–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤,  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
   
   if checking != "dont in base":
      if message.chat.type == "private":
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
         markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
         markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
         
         await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n\n{random.choice(list_info)}", reply_markup=markup)
   else:
      await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø.")

@dp.message_handler(commands=["help"])
async def help(message: types.Message):
   await message.answer("""
/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/html_font - –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å html —Ñ–æ–Ω—Ç
/markdown_font - –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MarkDown —Ñ–æ–Ω—Ç
/version - –≤–µ—Ä—Å–∏–∏ –∏ –Ω–æ–≤–≤–æ–≤–µ–¥–µ–Ω–∏—è
__________
/html_font |
-----------------
   """)

@dp.message_handler(commands=["html_font"])
async def html_font(message: types.Message):
   await message.answer("""
<b>–∂–∏—Ä–Ω—ã–π</b>
<u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>
<i>–∫—É—Ä—Å–∏–≤</i>
<s>–∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π</s>
<code>–º–æ–Ω–æ</code>
<pre><code class='python'>–∫–æ–¥</code></pre>
<a href='—Å—Å—ã–ª–∫–∞'></a>

________________
/markdown_font |
--------------------------
""")

@dp.message_handler(commands=["markdown_font"])
async def html_font(message: types.Message):
   await message.answer("""
*–∂–∏—Ä–Ω—ã–π*
_–∫—É—Ä—Å–∏–≤_ 
[—Ç–µ–∫—Å—Ç](url)
-–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π-

________
/version |
-------------
""")

@dp.message_handler(commands=["version"])
async def vesrion(message: types.Message):
   await message.answer("<b>üõ†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: new 0.1(29.01.2024-31.01.2024):</b>\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç'\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏'\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ 'üìù–ò–∑–º–µ–Ω–∏—Ç—å'\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ '–§–æ–Ω—Ç' –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ 'üîóURL –ö–Ω–æ–ø–∫–∞' –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π\n\n<b>üõ†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: reaction and fix 0.2(2.2.2024-5.2.2024):</b>\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ '‚ù§Ô∏è–†–µ–∞–∫—Ü–∏–∏'\n‚Ä¢–ü–æ—Ñ–∏–∫—à–µ–Ω—ã –±–∞–≥–∏/–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ 'üò∂‚Äçüå´–°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç', –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ –≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è —Ç–µ–∫—Å—Ç, –¥–ª—è –ø–æ–¥–ø–∏—â–∏–∫–æ–≤ –∏ –Ω–µ –¥–ª—è –ø–æ–¥–ø–∏—â–∏–∫–æ–≤(–µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)\n\n<b>üõ†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: supporting media and other 0.3(7.2.2024-12.2.2024):</b>\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–π –º–µ–¥–∏–∏\n‚Ä¢–î–æ–±–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ—Å—Ç, –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º\n‚Ä¢–¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –±–æ–ª—å—à–µ 1000 —á–µ–ª–æ–≤–µ–∫, —Ç–æ —Å—á—ë—Ç –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ—á–µ–Ω –Ω–∞ 1–∫. –∏ –±–æ–ª–µ–µ\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω—Ç–∞ 'MarkDown', –∏ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω —Ç–µ–∫—Å—Ç —É –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–æ–Ω—Ç–∞\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞\n‚Ä¢–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö 'üîê–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å' –¥–ª—è –∑–∞—â–∏—Ç—ã\n‚Ä¢–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–ª–∫–∏–µ –±–∞–≥–∏\n\n=====–ü—Ä–æ–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω=====", parse_mode="html")

@dp.message_handler(content_types=["text"])
async def text(message: types.Message):
   id = message.from_user.id
   
   checking = await db.check_db(message)
   await db.check_db(message)
   
   if checking == "dont in base":
      return await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø.")
   
   if message.chat.type == "private":
      if message.text == "üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç":
         if db.data[3] == "None":
            return await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª(‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)")
            
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("waitMessage", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET url_button = ? WHERE user_id = ?", ("None", id))
         db.cursor.execute("UPDATE admin_data SET reaction_button = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET text = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET name_hide_text = ? WHERE user_id = ?", ("None", id))
         db.cursor.execute("UPDATE admin_data SET not_sub_text = ? WHERE user_id = ?", ("None", id))
         db.cursor.execute("UPDATE admin_data SET sub_text = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET caption = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET video = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET video_note = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET voice = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET photo = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET document = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
            
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            
         await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥—Ä—É–≥—É—é –º–µ–¥–∏—é, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1-–æ–π —à—Ç—É–∫–∏.", reply_markup=markup)
      elif db.data[2] == "waitMessage":
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET text = ? WHERE user_id = ?", (message.text, id))
         db.conn.commit()
         
         await db.edit_message(message)
      elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
         await db.option(message)
      elif db.data[2] == "waitForwardMessage":
         await message.delete()
         
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         #await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 2)
         
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
         markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
         markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
         
         try:
            if message.forward_from_chat:
               channel_name = await bot.get_chat(chat_id=int(message.forward_from_chat.id))
               
               db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
               db.conn.commit()
               
               if db.data[3] == "None":
                  db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", (f"{message.forward_from_chat.id}", id))
                  db.conn.commit()
               else:
                  if str(message.forward_from_chat.id) in db.data[3]:
                     await message.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ –±–æ—Ç–µ", reply_markup=markup)
                  else:
                     db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", (f"|{message.forward_from_chat.id}", id))
                     db.conn.commit()
               
               if str(message.forward_from_chat.id) in db.data[3]:
                  pass
               else:
                  await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {channel_name.title} –≤ –±–æ—Ç–∞", reply_markup=markup)
               
               await db.check_db(message)
               
               await db.option(message)
            else:
               await message.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
         except Exception as e:
            return await message.answer(f"–í—ã –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, {e}")
      elif db.data[2] == "editMessage":
         db.cursor.execute("UPDATE admin_data SET text = ? WHERE user_id = ?", (message.text, id))
         db.conn.commit()
         
         await message.delete()
         
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         
         await db.edit_message(message)
      elif db.data[2] == "addUrlButton":
         db.cursor.execute("UPDATE admin_data SET text = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         msg = message.text
         
         await message.delete()
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         
         if "," in msg:
            msg = msg.replace(",", "")
         else:
            pass
         
         if not "|" in msg:
            msg = msg.split("\n")
            
            i = 0
            for mis in msg:
               if mis[int(mis.find("-")) - 1] == " ":
                  mis = mis[:int(mis.find("-")) - 1] + mis[int(mis.find("-")):]
                  msg[i] = mis
               if mis[int(mis.find("-")) + 1] == " ":
                  mis = mis[:int(mis.find("-")) + 1] + mis[int(mis.find("-")) + 2:]
                  msg[i] = mis
               i += 1
            
            msg = ",".join(msg)
         else:
            msg = msg.split("\n")
            
            i = 0
            for mas in msg:
               if mas[-1] == " ":
                  mas = mas[:-1]
                  msg[i] = mas
               if mas[-2] == " ":
                  mas = mas[:-2] + mas[-1]
                  msg[i] = mas
               if mas[0] == " ":
                  msg[i] = mas[1:]
               
               if mas[int(mas.find("-")) - 1] == " ":
                  mas = mas[:int(mas.find("-")) - 1] + mas[int(mas.find("-")):]
                  msg[i] = mas
               if mas[int(mas.find("-")) + 1] == " ":
                  mas = mas[:int(mas.find("-")) + 1] + mas[int(mas.find("-")) + 2:]
                  msg[i] = mas
               i += 1
            
            msg = "".join(msg)
         
         if db.data[5] == "None":
            db.cursor.execute("UPDATE admin_data SET url_button = ? WHERE user_id = ?", (f"{msg}", id))
            db.conn.commit()
         else:
            db.cursor.execute("UPDATE admin_data SET url_button = ? WHERE user_id = ?", (f"{''.join(db.data[5])},{msg}", id))
            db.conn.commit()
         
         await db.edit_message(message)
      elif db.data[2] == "addReactionButton":
         msg = message.text
         
         msg = msg.replace(" ", "")
         
         if db.data[6] == "None":
            db.cursor.execute("UPDATE admin_data SET reaction_button = ? WHERE user_id = ?", (msg, id))
            db.conn.commit()
         else:
            db.cursor.execute("UPDATE admin_data SET reaction_button = ? WHERE user_id = ?", (f"{db.data[6]},{msg}", id))
            db.conn.commit()
         
         await db.edit_message(message)
      elif db.data[2] == "waitHideTextName":
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         
         msg = message.text
         
         if "|" in msg:
            msg = msg.replace("|", "")
         if "," in msg:
            msg = msg.replace(",", "")
         
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("waitNotSubText", id))
         db.conn.commit()
         
         if db.data[7] == "None":
            db.cursor.execute("UPDATE admin_data SET name_hide_text = ? WHERE user_id = ?", (msg, id))
            db.conn.commit()
         else:
            db.cursor.execute("UPDATE admin_data SET name_hide_text = ? WHERE user_id = ?", (f",{msg}", id))
            db.conn.commit()
         
         await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏.–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–¥–æ 200 —Å–ª–æ–≤)")
      elif db.data[2] == "waitNotSubText":
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         
         msg = message.text
         
         if "|" in msg:
            msg = msg.replace("|", "")
         if "," in msg:
            msg = msg.replace(",", "")
         
         if len(msg) > 200:
            return await message.answer("–£–≤—ã, –Ω–æ –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ –±–æ–ª—å—à–µ 200 —Å–ª–æ–≤.")
         
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("waitSubText", id))
         db.conn.commit()
         
         if db.data[8] == "None":
            db.cursor.execute("UPDATE admin_data SET not_sub_text = ? WHERE user_id = ?", (msg, id))
            db.conn.commit()
         else:
            db.cursor.execute("UPDATE admin_data SET not_sub_text = ? WHERE user_id = ?", (f",{msg}", id))
            db.conn.commit()
         
         await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –∫–Ω–æ–ø–∫—É.–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω(–¥–æ 200 —Å–ª–æ–≤)")
      elif db.data[2] == "waitSubText":
         await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
         
         msg = message.text
         
         if "|" in msg:
            msg = msg.replace("|", "")
         if "," in msg:
            msg = msg.replace(",", "")
         
         if len(msg) > 200:
            return await message.answer("'–£–≤—ã, –Ω–æ –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ –±–æ–ª—à–µ 200 —Å–ª–æ–≤.")
         
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET sub_text = ? WHERE user_id = ?", (msg, id))
         db.conn.commit()
         
         await db.edit_message(message)
      elif db.data[2] == "GetUserIdForNewOwner":
         if message.forward_origin.id:
            db.cursor.execute("INSERT OR IGNORE INTO admin_data (user_id) VALUES (?)", (message.forward_origin.id))
            db.conn.commit()
            
            db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
            db.conn.commit()
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
            markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", reply_markup=markup)
         else:
             markup = types.InlineKeyboardMarkup()
             markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
             
             await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏, —Å–∫—Ä—ã–ª —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–≤–µ—Ç—É—é –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫")
      elif db.data[2] == "GetPassword":
         password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
         
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         if message.text == password[0][0]:
             await message.delete()
             
             db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("GetUserIdForNewOwner", id))
             db.conn.commit()
            
             await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞", reply_markup=markup)
            
             markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
             btn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫", request_user=types.KeyboardButtonRequestUser(request_id=9876, user_is_bot=False))
         
             markup.add(btn)
         
             await message.answer("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
         else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)
      elif db.data[2] == "GetPasswordForDelOwner":
         password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
         
         if message.text == password[0][0]:
            db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
            db.conn.commit()
            
            markup = types.InlineKeyboardMarkup(row_width=1)
         
            for owner in db.cursor.execute("SELECT * FROM admin_data").fetchall():
               markup.add(types.InlineKeyboardButton(f"{owner[0]}", callback_data=f"del_owner {owner[0]}"))
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
         else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)
      elif db.data[2] == "setPassword":
         db.cursor.execute("UPDATE admin_data SET password = ? WHERE user_id = ?", (message.text, id))
         db.conn.commit()
         
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         print("test")
         
         await db.option(message)
      elif db.data[2] == "GetPasswordForNew":
         password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
         
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         if message.text == password[0][0]:
            db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("setPassword", id))
            db.conn.commit()
            
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–∏–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)
         else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data.startswith("del_owner "))
async def delete_owner(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split("del_owner ")[1]
   
   await db.call_check_db(call)
   
   db.cursor.execute(f"DELETE FROM admin_data WHERE user_id LIKE {splited}")
   db.conn.commit()
   
   await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
   
   await db.call_option(call)

@dp.callback_query_handler(lambda call: call.data.startswith("del_channel "))
async def delete_channel(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split("del_channel ")[1]
   
   await db.call_check_db(call)
   
   if "|" in db.data[3]:
      channels = db.data[3].replace(f"|{splited}", "")
   else:
      channels = db.data[3].replace(f"{splited}", "")
   
   db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", (channels, call.from_user.id))
   db.conn.commit()
   
   await db.call_check_db(call)
   
   if not db.data[3]:
      db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", ("None", call.from_user.id))
      db.conn.commit()
   
   await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞–Ω–∞–ª")
   
   await db.call_check_db(call)
   
   await db.call_option(call)

@dp.callback_query_handler(lambda call: call.data.startswith("hide_text "))
async def hide_text(call: types.CallbackQuery):
   hide_text = db.cursor.execute("SELECT * FROM reaction_msg WHERE message_id = ? AND channel_id = ?", (call.message.message_id, call.message.chat.id)).fetchone()
   
   user = await bot.get_chat_member(chat_id=hide_text[1], user_id=call.from_user.id)
   if user.status in ["member", "administrator", "creator"]:
      await call.answer(text=hide_text[8], show_alert=True)
   else:
      await call.answer(text=hide_text[7], show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith("reaction "))
async def reaction_call(call: types.CallbackQuery):
   await db.call_check_db(call)
   
   reaction = db.cursor.execute("SELECT * FROM reaction_msg WHERE message_id = ? AND channel_id = ?", (call.message.message_id, call.message.chat.id)).fetchone()
   
   react = call.data.split("reaction ")
   users = reaction[3].split("|")
   
   markup = types.InlineKeyboardMarkup()
   
   sobr = []
   
   if reaction[3] == "None" or reaction[3] != "None":
      for user in users:
         if str(call.from_user.id) in user:
            return await call.answer(f"üö´–í—ã –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ...")
      var_emoji = reaction[2].split(",")
      
      for pot in var_emoji:
         if react[1] in pot:
            vars = int(pot[1:])
            pot = f"{pot[0]}{vars+1}"
         sobr.append(pot)
   
      db.cursor.execute("UPDATE reaction_msg SET emoji_and_var = ? WHERE message_id = ? AND channel_id = ?", (",".join(sobr), call.message.message_id, call.message.chat.id))
      db.conn.commit()
   
   reaction = db.cursor.execute("SELECT * FROM reaction_msg WHERE message_id = ? AND channel_id = ?", (call.message.message_id, call.message.chat.id)).fetchone()
   
   if reaction[4] != "None":
      spl = reaction[4].split(",")
         
      btn_row = []
      for btn in spl:
         if not "|" in btn:
            splr = "".join(btn).split("-")
            if not splr:
               pass
            else:
               markup.add(types.InlineKeyboardButton(f"{splr[0]}", url=f"{splr[1]}"))
         else:
            palk = "".join(btn).split("|")
            for palka in palk:
               ch = "".join(palka).split("-")
               
               if not ch:
                  pass
               else:
                  btn_row.append(types.InlineKeyboardButton(f"{ch[0]}", url=f"{ch[1]}"))
               
            markup.add(*btn_row)
   else:
      pass
   
   if db.data[7] != "None":
      markup.add(types.InlineKeyboardButton(f"{db.data[7]}", callback_data=f"hide_text {db.data[7]}"))
   
   if reaction[5] != "None":
      btns_emoji = []
      emoji_and_var = []
         
      sdd = reaction[5].split(",")
      for ceh in sdd:
         if "\n" in ceh:
            for res in ceh.split("\n"):
               for ins in res.split("|"):
                  for emj in reaction[2].split(","):
                     if emj[0] == ins:
                        ins = emj
                        
                        if len(str(ins[1:])) > 3:
                           if len(str(ins[1:])) == 4:
                              formated = f"{ins[1]}.{ins[2]}k"
                           elif len(str(ins[1:])) == 5:
                              formated = f"{ins[1:3]}.{ins[3]}k"
                           elif len(str(ins[1:])) == 6:
                              formated = f"{ins[1:4]}.{ins[4]}k"
                           elif len(str(ins[1:])) == 7:
                              formated = f"{ins[1]}.{ins[2]}m"
                           elif len(str(ins[1:])) == 8:
                              formated = f"{ins[1:3]}.{ins[3]}m"
                           elif len(str(ins[1:])) == 9:
                              formated = f"{ins[1:3]}.{ins[4]}m"
                           ins = f"{ins[0]}{formated}"
                     
                  btns_emoji.append(types.InlineKeyboardButton(f"{ins}", callback_data=f"reaction {ins[0]}"))
                  
                  emoji_and_var.append(f"{ins[0]}")
               markup.add(*btns_emoji)
               btns_emoji = []
         else:
            pdd = ceh.split("|")
               
            for res in pdd:
               for emj in reaction[2].split(","):
                  if emj[0] == res:
                     res = emj
                     
                     if len(str(res[1:])) > 3:
                        if len(str(res[1:])) == 4:
                           formated = f"{res[1]}.{res[2]}k"
                        elif len(str(res[1:])) == 5:
                           formated = f"{res[1:3]}.{res[3]}k"
                        elif len(str(res[1:])) == 6:
                           formated = f"{res[1:4]}.{res[4]}k"
                        elif len(str(res[1:])) == 7:
                           formated = f"{res[1]}.{res[2]}m"
                        elif len(str(res[1:])) == 8:
                           formated = f"{res[1:3]}.{res[3]}m"
                        elif len(str(res[1:])) == 9:
                           formated = f"{res[1:3]}.{res[4]}m"
                        res = f"{res[0]}{formated}"
               
               btns_emoji.append(types.InlineKeyboardButton(f"{res}", callback_data=f"reaction {res[0]}"))
               
               emoji_and_var.append(f"{res[0]}")
               
            markup.add(*btns_emoji)
            btns_emoji = []
      
   if reaction[3] == "None":
      db.cursor.execute("UPDATE reaction_msg SET used_reaction = ? WHERE message_id = ? AND channel_id = ?", (call.from_user.id, call.message.message_id, call.message.chat.id))
      db.conn.commit()
   else:
      db.cursor.execute("UPDATE reaction_msg SET used_reaction = ? WHERE message_id = ? AND channel_id = ?", (f"{reaction[3]}|{call.from_user.id}", call.message.message_id, call.message.chat.id))
      db.conn.commit()
    
   if call.message.caption:
      await bot.edit_message_caption(chat_id=reaction[1], message_id=call.message.message_id, caption=call.message.caption, reply_markup=markup)
   else:
      await bot.edit_message_text(chat_id=reaction[1], message_id=call.message.message_id, text=call.message.text, reply_markup=markup)
      
   await call.answer(f"–í—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏: {pot[0]}")

@dp.callback_query_handler(lambda call: call.data.startswith("sendmsg "))
async def sendmsg(call: types.CallbackQuery):
   await call.message.delete()
   
   splited = call.data.split("sendmsg ")[1]
   
   checking = await db.call_check_db(call)
   await db.call_check_db(call)
   
   if checking == "dont in base":
      return await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø.")
   
   markup = types.InlineKeyboardMarkup()
   
   if db.data[5] != "None":
      spl = db.data[5].split(",")
         
      btn_row = []
      for btn in spl:
         if not "|" in btn:
            splr = "".join(btn).split("-")
            if not splr:
               pass
            else:
               markup.add(types.InlineKeyboardButton(f"{splr[0]}", url=f"{splr[1]}"))
         else:
            palk = "".join(btn).split("|")
            for palka in palk:
               ch = "".join(palka).split("-")
               
               if not ch:
                  pass
               else:
                  btn_row.append(types.InlineKeyboardButton(f"{ch[0]}", url=f"{ch[1]}"))
               
            markup.add(*btn_row)
   else:
      pass
   
   if db.data[7] != "None":
      markup.add(types.InlineKeyboardButton(f"{db.data[7]}", callback_data=f"hide_text {db.data[7]}"))
   
   btns_emoji = []
   emoji_and_var = []
   if db.data[6] != "None":
         
      sdd = db.data[6].split(",")
      for ceh in sdd:
         if "\n" in ceh:
            for res in ceh.split("\n"):
               for ins in res.split("|"):
                  btns_emoji.append(types.InlineKeyboardButton(f"{ins}0", callback_data=f"reaction {ins}"))
                  
                  emoji_and_var.append(f"{ins}0")
               markup.add(*btns_emoji)
               btns_emoji = []
         else:
            pdd = ceh.split("|")
               
            for res in pdd:
               btns_emoji.append(types.InlineKeyboardButton(f"{res}0", callback_data=f"reaction {res}"))
               
               emoji_and_var.append(f"{res}0")
               
            markup.add(*btns_emoji)
            btns_emoji = []
   
   if db.data[11] == "None" and db.data[12] == "None" and db.data[13] == "None" and db.data[14] == "None" and db.data[15] == "None":
      try:
         if db.data[4] == 0:
            msg = await bot.send_message(int(splited), db.data[1], parse_mode="html", reply_markup=markup)
         
         elif db.data[4] == 2:
            msg = await bot.send_message(int(splited), db.data[1], parse_mode="markdown", reply_markup=markup)
         
         else:
            msg = await bot.send_message(int(splited), db.data[1], reply_markup=markup)
      
      except Exception as e:
         return await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª(‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)")
   else:
      try:
         if db.data[10] != "None":
            caption = db.data[10]
         else:
            caption = None
         
         if db.data[11] != "None":
            msg = await db.bot.send_video(chat_id=int(splited), video=db.data[11], reply_markup=markup, caption=caption)
            
         elif db.data[12] != "None":
            msg = await bot.send_video_note(chat_id=int(splited), video_note=db.data[12], reply_markup=markup, caption=caption)
            
         elif db.data[13] != "None":
            msg = await bot.send_photo(chat_id=int(splited), photo=db.data[13], reply_markup=markup, caption=caption)
               
         elif db.data[14] != "None":
            msg = await bot.send_voice(chat_id=int(splited), voice=db.data[14], reply_markup=markup, caption=caption)
            
         elif db.data[15] != "None":
            msg = await bot.send_document(chat_id=int(splited), document=db.data[15], reply_markup=markup, caption=caption)
            
      except Exception as e:
         return await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª(‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)")
   
   if db.data[6] != "None":
      react = db.cursor.execute("SELECT * FROM reaction_msg")
      
      db.cursor.execute("INSERT INTO reaction_msg (message_id, channel_id, emoji_and_var, user_reaction, url_button, reaction_button, name_hide_text, not_sub_text, sub_text) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (msg.message_id, splited, ",".join(emoji_and_var), "None", db.data[5], db.data[6], db.data[7], db.data[8], db.data[9]))
      db.conn.commit()
   
   await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª")

@dp.callback_query_handler(lambda call: True)
async def call(call: types.CallbackQuery):
   id = call.from_user.id
   
   checking = await db.call_check_db(call)
   await db.call_check_db(call)
   
   if checking == "dont in base":
      return await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–∞–∫ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø.")
   
   if call.data == "cancel":
      if db.data[2] in ["editMessage", "addUrlButton", "addReactionButton"]:
         await call.message.delete()
         
         await db.call_edit_message(call)
         
         await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
      else:
         await call.message.delete()
         
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
         db.conn.commit()
         
         await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
         
         if call.message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ" or call.message.text == "–ë–æ—Ç–∞ –Ω–µ—Ç—É –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–µ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –∏–∑–º–µ–Ω—è—Ç—å –∏ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ) Chat not found" or db.data[2] == "GetUserIdForNewOwner" or db.data[2] == "GetPassword" or db.data[2] == "GetPasswordForDelOwner" or db.data[2] == "setPassword" or db.data[2] == "GetPasswordForNew":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
            markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            await call.message.answer("–î–µ–ª–∞–µ—Ç—Å—è –º–µ–Ω—é...", reply_markup=markup)
            
            await db.call_option(call)
   elif call.data == "postMessage":
      if db.data[3] == "None":
         return await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª(‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)")
      
      await call.message.delete()
      
      quantity_channel = 0
      for i in db.data[3].split("|"):
         if i:
            quantity_channel += 1
      
      btn_list = []
      if quantity_channel > 1:
         for channel in db.data[3].split("|"):
            try:
               if not channel:
                  pass
               else:
                     
                  channel_name = await bot.get_chat(chat_id=int(channel))
                  
                  btn_list.append(types.InlineKeyboardButton(f"{channel_name.title}", callback_data=f"sendmsg {channel}"))
            except Exception as e:
               return await call.message.answer(f"–ë–æ—Ç–∞ –Ω–µ—Ç—É –Ω–∞ –∫–∞–∫–æ–º —Ç–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ {e}")
         
         markup = types.InlineKeyboardMarkup()
         markup.add(*btn_list)
         markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö", callback_data="send_all_channel"))
         
         return await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=markup)
      
      markup = types.InlineKeyboardMarkup()
      
      btn_row = []
      if db.data[5] != "None":
         spl = db.data[5].split(",")
            
         for btn in spl:
            if not "|" in btn:
               splr = "".join(btn).split("-")
               if not splr:
                  pass
               else:
                  markup.add(types.InlineKeyboardButton(f"{splr[0]}", url=f"{splr[1]}"))
            else:
               palk = "".join(btn).split("|")
               for palka in palk:
                  ch = "".join(palka).split("-")
                  
                  if not ch:
                     pass
                  else:
                     btn_row.append(types.InlineKeyboardButton(f"{ch[0]}", url=f"{ch[1]}"))
                  
               markup.add(*btn_row)
      else:
         pass
      
      if db.data[7] != "None":
         markup.add(types.InlineKeyboardButton(f"{db.data[7]}", callback_data=f"hide_text {db.data[7]}"))
      
      btns_emoji = []
      emoji_and_var = []
      if db.data[6] != "None":
         
         sdd = db.data[6].split(",")
         for ceh in sdd:
            if "\n" in ceh:
               for res in ceh.split("\n"):
                  for ins in res.split("|"):
                     btns_emoji.append(types.InlineKeyboardButton(f"{ins}0", callback_data=f"reaction {ins}"))
                     
                     emoji_and_var.append(f"{ins}0")
                     
                  markup.add(*btns_emoji)
                  btns_emoji = []
            else:
               pdd = ceh.split("|")
               
               for res in pdd:
                  btns_emoji.append(types.InlineKeyboardButton(f"{res}0", callback_data=f"reaction {res}"))
                  
                  emoji_and_var.append(f"{res}0")
               
               markup.add(*btns_emoji)
               btns_emoji = []
      
      if db.data[11] == "None" and db.data[12] == "None" and db.data[13] == "None" and db.data[14] == "None" and db.data[15] == "None":
         try:
            if db.data[4] == 1:
               msg = await bot.send_message("".join(db.data[3].split("|")).replace(" ", ""), "".join(db.data[1]), parse_mode="html", reply_markup=markup)
            
            elif db.data[4] == 2:
               msg = await bot.send_message("".join(db.data[3].split("|")).replace(" ", ""), "".join(db.data[1]), parse_mode="markdown", reply_markup=markup)
            
            else:
               msg = await bot.send_message("".join(db.data[3].split("|")).replace(" ", ""), "".join(db.data[1]), reply_markup=markup)
          
         except CantParseEntities as e:
            msg = await bot.send_message("".join(db.data[3].split("|")).replace(" ", ""), "".join(db.data[1]), reply_markup=markup)
            
            await call.answer("üö´–¢–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
                
         except Exception as e:
            return await call.message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ")
      else:
         if db.data[10] != "None":
            caption = db.data[10]
         else:
            caption = None
         
         if db.data[11] != "None":
           msg = await db.bot.send_video(chat_id="".join(db.data[3].split("|")).replace(" ", ""), video=db.data[11], caption=caption, reply_markup=markup)
           
         elif db.data[12] != "None":
            msg = await bot.send_video_note(chat_id="".join(db.data[3].split("|")).replace(" ", ""), video_note=db.data[12], caption=caption, reply_markup=markup)
            
         elif db.data[13] != "None":
            msg = await bot.send_photo(chat_id="".join(db.data[3].split("|")).replace(" ", ""), photo=db.data[13], caption=caption, reply_markup=markup)
               
         elif db.data[14] != "None":
            msg = await bot.send_voice(chat_id="".join(db.data[3].split("|")).replace(" ", ""), voice=db.data[14], caption=caption, reply_markup=markup)
            
         elif db.data[15] != "None":
            msg = await bot.send_document(chat_id="".join(db.data[3].split("|")).replace(" ", ""), document=db.data[15], caption=caption, reply_markup=markup)
      
      await call.message.answer("‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ø–æ—Å—Ç –Ω–∞ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.")
      
      react = db.cursor.execute("SELECT * FROM reaction_msg")
       
      db.cursor.execute("INSERT INTO reaction_msg (message_id, channel_id, emoji_and_var, used_reaction, url_button, reaction_button, name_hide_text, not_sub_text, sub_text) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (msg.message_id, "".join(db.data[3].split("|")).replace(" ", ""), ",".join(emoji_and_var), "None", db.data[5], db.data[6], db.data[7], db.data[8], db.data[9]))
      db.conn.commit()
   elif call.data == "add_channel":
      await call.message.delete()
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("waitForwardMessage", id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/animeLiSTOdnianimebot?startchannel=invite"))
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      await call.message.answer("–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω—è—Ç—å), –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.", reply_markup=markup)
      
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      
      user_rights = types.ChatAdministratorRights(can_restrict_members=True, can_manage_chat=True, can_promote_members=True)
      
      btn = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", 
      request_chat=types.KeyboardButtonRequestChat(
      request_id=123, 
      chat_is_channel=True,
      user_administrator_rights=user_rights))
      
      markup.add(btn)
      await call.message.answer("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–∞—Ç–æ–º –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
   elif call.data == "editMessage":
      await call.message.delete()
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("editMessage", id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=markup)
   elif call.data == "parsing":
      if db.data[4] == 0:
         db.cursor.execute("UPDATE admin_data SET parse_mode = ? WHERE user_id = ?", (1, id))
         db.conn.commit()
         
      elif db.data[4] == 1:
         db.cursor.execute("UPDATE admin_data SET parse_mode = ? WHERE user_id = ?", (2, id))
         db.conn.commit()
         
      elif db.data[4] == 2:
         db.cursor.execute("UPDATE admin_data SET parse_mode = ? WHERE user_id = ?", (0, id))
         db.conn.commit()
      
      await db.call_edit_message(call)
   elif call.data == "add_url_button":
      await call.message.delete()
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("addUrlButton", id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ë–µ–∑ —Ä—è–¥–∞\n```\n–ö–Ω–æ–ø–∫–∞ 1 - https://t.me/odnianime\n–ö–Ω–æ–ø–∫–∞ 2 - https://t.me/odnianime```\n\n–° —Ä—è–¥–æ–º\n```\n–ö–Ω–æ–ø–∫–∞ 1 - —Å—Å—ã–ª–∫–∞ |\n–ö–Ω–æ–ø–∫–∞ 2 - —Å—Å—ã–ª–∫–∞ |\n–ö–Ω–æ–ø–∫–∞ 3 - —Å—Å—ã–ª–∫–∞```\n\n*–í–Ω–∏–º–∞–Ω–∏–µ, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –∫–Ω–æ–ø–æ–∫*", reply_markup=markup, parse_mode="markdownv2")
   elif call.data == "reactionMessage":
      await call.message.delete()
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("addReactionButton", id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n```\nüëç | üëé\n```\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ —Å —Ä—è–¥–∞–º–∏:\n```\nüëç | üëé\nüëç | üëé\n```", reply_markup=markup)
   elif call.data == "delete_channel":
      await call.message.delete()
      
      if db.data[3] == "None":
         await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª(‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> ‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)")
         
         return await db.call_option(call)
         
      markup = types.InlineKeyboardMarkup(row_width=3)
      
      for chn in db.data[3].split("|"):
         try:
            if not chn:
               pass
            else:
               channel = await bot.get_chat(chat_id=int(chn))
               
               markup.add(types.InlineKeyboardButton(f"{channel.title}", callback_data=f"del_channel {chn}"))
         except Exception as e:
            if not chn:
               pass
            else:
               channel = "–£–¥–∞–ª—ë–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"
               
               markup.add(types.InlineKeyboardButton(f"{channel}", callback_data=f"del_channel {chn}"))
      
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
      
      await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ", reply_markup=markup)
   elif call.data == "hideText":
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("waitHideTextName", id))
      db.conn.commit()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", reply_markup=markup)
   elif call.data == "send_all_channel":
      await call.message.delete()
      
      successfull = 0
      all_channel = 0
      
      for channel in db.data[3].split("|"):
            markup = types.InlineKeyboardMarkup()
      
            btn_row = []
            if db.data[5] != "None":
               spl = db.data[5].split(",")
                  
               for btn in spl:
                  if not "|" in btn:
                     splr = "".join(btn).split("-")
                     if not splr:
                        pass
                     else:
                        markup.add(types.InlineKeyboardButton(f"{splr[0]}", url=f"{splr[1]}"))
                  else:
                     palk = "".join(btn).split("|")
                     for palka in palk:
                        ch = "".join(palka).split("-")
                        
                        if not ch:
                           pass
                        else:
                           btn_row.append(types.InlineKeyboardButton(f"{ch[0]}", url=f"{ch[1]}"))
                        
                     markup.add(*btn_row)
            else:
               pass
            
            if db.data[7] != "None":
               markup.add(types.InlineKeyboardButton(f"{db.data[7]}", callback_data=f"hide_text {db.data[7]}"))
            
            btns_emoji = []
            emoji_and_var = []
            if db.data[6] != "None":
               
               sdd = db.data[6].split(",")
               for ceh in sdd:
                  if "\n" in ceh:
                     for res in ceh.split("\n"):
                        for ins in res.split("|"):
                           btns_emoji.append(types.InlineKeyboardButton(f"{ins}0", callback_data=f"reaction {ins}"))
                           
                           emoji_and_var.append(f"{ins}0")
                           
                        markup.add(*btns_emoji)
                        btns_emoji = []
                  else:
                     pdd = ceh.split("|")
                     
                     for res in pdd:
                        btns_emoji.append(types.InlineKeyboardButton(f"{res}0", callback_data=f"reaction {res}"))
                        
                        emoji_and_var.append(f"{res}0")
                     
                     markup.add(*btns_emoji)
                     btns_emoji = []
            
            all_channel += 1
            if db.data[11] == "None" and db.data[12] == "None" and db.data[13] == "None" and db.data[14] == "None" and db.data[15] == "None":
               try:
                  if db.data[4] == 1:
                     msg = await bot.send_message(channel, "".join(db.data[1]), parse_mode="html", reply_markup=markup)
               
                  elif db.data[4] == 2:
                     msg = await bot.send_message(channel, "".join(db.data[1]), parse_mode="markdown", reply_markup=markup)
                  
                  else:
                     msg = await bot.send_message(channel, "".join(db.data[1]), reply_markup=markup)
                  
               except CantParseEntities as e:
                     
                  msg = await bot.send_message(channel, "".join(db.data[1]), reply_markup=markup)
                  
                  await call.answer("üö´–¢–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
            else:
               try:
                  if db.data[10] != "None":
                     caption = db.data[10]
                  else:
                     caption = None
                  
                  if db.data[11] != "None":
                    msg = await db.bot.send_video(chat_id=channel, video=db.data[11], caption=caption, reply_markup=markup)
                    
                  elif db.data[12] != "None":
                     msg = await bot.send_video_note(chat_id=channel, video_note=db.data[12], caption=caption, reply_markup=markup)
                     
                  elif db.data[13] != "None":
                     msg = await bot.send_photo(chat_id=channel, photo=db.data[13], caption=caption, reply_markup=markup)
                        
                  elif db.data[14] != "None":
                     msg = await bot.send_voice(chat_id=channel, voice=db.data[14], caption=caption, reply_markup=markup)
                     
                  elif db.data[15] != "None":
                     msg = await bot.send_document(chat_id=channel, document=db.data[15], caption=caption, reply_markup=markup)
               
               except Exception as e:
                  pass
               
               successfull += 1
               
               react = db.cursor.execute("SELECT * FROM reaction_msg")
                
               db.cursor.execute("INSERT INTO reaction_msg (message_id, channel_id, emoji_and_var, used_reaction, url_button, reaction_button, name_hide_text, not_sub_text, sub_text) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (msg.message_id, channel, ",".join(emoji_and_var), "None", db.data[5], db.data[6], db.data[7], db.data[8], db.data[9]))
               db.conn.commit()
            #except Exception as e:
#               await call.answer("–ü–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∫–∞–∫–∞–æ–π —Ç–æ –∫–∞–Ω–∞–ª")
               
      await call.message.answer(f"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–∞—Ö {successfull}/{all_channel}")
   elif call.data == "add_owner":
      await call.message.delete()
      
      password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
      
      if password[0][0] == "None":
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("GetUserIdForNewOwner", id))
         db.conn.commit()
         
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         await call.message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞", reply_markup=markup)
         
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
         btn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫", request_user=types.KeyboardButtonRequestUser(request_id=9876, user_is_bot=False))
         
         markup.add(btn)
         
         await call.message.answer("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞", reply_markup=markup)
      else:
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("GetPassword", id))
         db.conn.commit()
         
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞", reply_markup=markup)
   elif call.data == "del_owner":
      await call.message.delete()
      
      password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
      
      if password[0][0] == "None":
         markup = types.InlineKeyboardMarkup(row_width=1)
         
         for owner in db.cursor.execute("SELECT * FROM admin_data").fetchall():
            markup.add(types.InlineKeyboardButton(f"{owner[0]}", callback_data=f"del_owner {owner[0]}"))
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
      else:
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("GetPasswordForDelOwner", id))
         db.conn.commit()
         
         markup = types.InlineKeyboardMarkup()
         markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
         
         await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", reply_markup=markup)
   elif call.data == "set_password":
      await call.message.delete()
      
      password = db.cursor.execute("SELECT password FROM admin_data").fetchall()
      
      markup = types.InlineKeyboardMarkup()
      markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
      
      if password[0][0] == "None":
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("setPassword", id))
         db.conn.commit()
         
         await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–∏–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)
      else:
         db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("GetPasswordForNew", id))
         db.conn.commit()
         
         await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å", reply_markup=markup)

@dp.message_handler(content_types=["chat_shared"])
async def chat_shared(message: types.Message):
   print(message)
   
   await db.check_db(message)
   
   id = message.from_user.id
   
   markup = types.InlineKeyboardMarkup()
   markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
   
   if db.data[2] == "waitForwardMessage":
      try:
         channel = await bot.get_chat(message.chat_shared["chat_id"])
      except Exception as e:
         return await message.answer(f"–ë–æ—Ç–∞ –Ω–µ—Ç—É –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–µ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –∏–∑–º–µ–Ω—è—Ç—å –∏ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ) {e}", reply_markup=markup)
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
      db.conn.commit()
      
      if db.data[3] == "None":
         db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", (f"{message.chat_shared['chat_id']}", id))
         db.conn.commit()
      else:
         if str(message.chat_shared["chat_id"]) in db.data[3]:
            await message.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ –±–æ—Ç–µ")
         else:
            db.cursor.execute("UPDATE admin_data SET channel = ? WHERE user_id = ?", (f"{db.data[3]}|{message.chat_shared['chat_id']}", id))
            db.conn.commit()
      
      await message.delete()
      #await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 1)
      #await bot.delete_message(chat_id=message.from_user.id, message_id=int(message.message_id) - 2)
      
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
      markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
      
      await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {channel.title} –≤ –±–æ—Ç–∞", reply_markup=markup)
      
      await db.check_db(message)
      
      await db.option(call)

@dp.message_handler(content_types=["user_shared"])
async def user_shared(message: types.Message):
   await db.check_db(message)
   
   id = message.from_user.id
   print(message.user_shared.user_id)
   
   if db.data[2] == "GetUserIdForNewOwner":
      db.cursor.execute("INSERT OR IGNORE INTO admin_data (user_id) VALUES (?)", (message.user_shared.user_id,))
      db.conn.commit()
      
      db.cursor.execute("UPDATE admin_data SET room = ? WHERE user_id = ?", ("None", id))
      db.conn.commit()
      
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      markup.add("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
      markup.add("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
      
      await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞", reply_markup=markup)

if "__main__" == __name__:
   executor.start_polling(dp)
